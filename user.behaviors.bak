;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           ]

     ;; The editor tag is applied to all editors
     ;; theme candidate: the-matrix, 3024-night, lesser-dark, ibdknox
     ;; vibrant-ink, borealis
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "borealis")
              ;; (:lt.objs.style/set-theme "rubyblue")
              (:lt.objs.style/font-settings "Ricty Discord" "11" "1.2")
              (:lt.plugins.emacs/activate-emacs)


              ;; 行番号を表示
;;              :lt.objs.editor/line-numbers
              ;; カーソル行をハイライト
              :lt.objs.editor/highlight-current-line
             ]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]

     :editor.html [(:lt.objs.editor/tab-settings false 2 2)]

     ;; for cljx
     ;; ref: https://groups.google.com/forum/#!topic/light-table-discussion/LjlYu6K1sWk
     :files [(:lt.objs.files/file-types [{:exts [:cljx],
                                          :mime "text/x-clojure",
                                          :name "CljX",
                                          :tags [:editor.clj :editor.clojure]}])]



     }

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app []}}

